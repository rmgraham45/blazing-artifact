@page "/Move"
@using System.Text
@rendermode InteractiveServer
@using Artifacts.Components
@using Artifacts.Components.Services
@using System.Text.Json
@using Radzen
@using Radzen.Blazor
@implements IDisposable

@inject CharacterService CharacterService
@inject NotificationService NotificationService
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration

<PageTitle>Character Dashboard</PageTitle>

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenStack Gap="1rem">
        <RadzenText TextStyle="TextStyle.H2" class="rz-mb-0">Character Dashboard</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1">Manage all your characters from one place</RadzenText>
        
        <RadzenButton ButtonStyle="ButtonStyle.Primary" 
                    Text="Refresh Characters" 
                    Icon="refresh"
                    Click="@RefreshCharacters" />
    </RadzenStack>
</RadzenCard>

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenText TextStyle="TextStyle.H4" class="rz-mb-3">Your Characters</RadzenText>
    
    @if (isLoading)
    {
        <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" Style="height: 8px;" class="rz-mb-3" />
    }
    else if (!CharacterService.GetCharacterNames().Any())
    {
        <RadzenText TextStyle="TextStyle.Body1">No characters found. Please refresh to fetch your characters.</RadzenText>
    }
    else
    {
        <RadzenStack Gap="1rem">
            @foreach (var characterName in CharacterService.GetCharacterNames())
            {
                var character = CharacterService.GetCharacterData(characterName);
                if (character != null)
                {
                    <CharacterSummary Character="character" OnExpand="HandleCharacterExpand" />
                }
            }
        </RadzenStack>
    }
</RadzenCard>

@if (!string.IsNullOrEmpty(CharacterService.GetExpandedCharacter()))
{
    var expandedCharacter = CharacterService.GetCharacterData(CharacterService.GetExpandedCharacter());
    if (expandedCharacter != null)
    {
        <CharacterDetail Character="expandedCharacter" />
    }
}

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenText TextStyle="TextStyle.H4" class="rz-mb-0">Map Coordinates</RadzenText>
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="@(isCoordinatesTableVisible ? "visibility_off" : "visibility")" Text="@(isCoordinatesTableVisible ? "Hide" : "Show")" Click="@ToggleCoordinatesTable" />
    </RadzenStack>
    
    @if (isCoordinatesTableVisible)
    {
        <RadzenStack Gap="1rem" Class="rz-mt-4">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.End">
                <RadzenStack Gap="0.5rem" Style="width: 200px;">
                    <RadzenText TextStyle="TextStyle.Caption">Content Type</RadzenText>
                    <RadzenTextBox Placeholder="Filter by type" @bind-Value="contentType" />
                </RadzenStack>
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Fetch Map Data" Icon="refresh" Click="@FetchMapData" />
            </RadzenStack>
            
            <RadzenDataGrid Data="@coordinates" TItem="Coordinate" AllowSorting="true" AllowFiltering="true" 
                           Style="height: 400px" AllowColumnResize="true" AllowPaging="true" PageSize="10"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           class="rz-shadow-1">
                <Columns>
                    <RadzenDataGridColumn TItem="Coordinate" Property="Name" Title="Name" Width="150px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="X" Title="X" Width="80px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="Y" Title="Y" Width="80px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="Content.Type" Title="Resource Type" 
                                        SortProperty="Content.Type" Width="150px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="Content.Code" Title="Resource Code" Width="150px" />
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    }
</RadzenCard>

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenText TextStyle="TextStyle.H4" class="rz-mb-3">Craft Data</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.End" Class="rz-mb-4">
        <RadzenStack Gap="0.5rem" Style="width: 200px;">
            <RadzenText TextStyle="TextStyle.Caption">Craft Material</RadzenText>
            <RadzenTextBox Placeholder="Enter material" @bind-Value="craftMaterial" />
        </RadzenStack>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Fetch Craft Data" Icon="search" Click="@FetchCraftData" />
    </RadzenStack>
    
    @if (craftItems.Any())
    {
        <RadzenDataGrid Data="@craftItems" TItem="CraftItem" AllowSorting="true" AllowFiltering="true" 
                       Style="height: 500px" AllowColumnResize="true" AllowPaging="true" PageSize="10"
                       FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                       class="rz-shadow-1">
            <Columns>
                <RadzenDataGridColumn TItem="CraftItem" Property="Name" Title="Name" Width="150px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Code" Title="Code" Width="100px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Level" Title="Level" Width="80px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Type" Title="Type" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Subtype" Title="Subtype" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Description" Title="Description" Width="200px" />
                <RadzenDataGridColumn TItem="CraftItem" Title="Effects" Sortable="false" Width="150px">
                    <Template Context="item">
                        <RadzenStack Gap="0.5rem">
                            @foreach (var effect in item.Effects)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@($"{effect.Code}: {effect.Value}")" />
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CraftItem" Property="Craft.Skill" Title="Craft Skill" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Craft.Level" Title="Craft Level" Width="100px" />
                <RadzenDataGridColumn TItem="CraftItem" Title="Craft Items" Sortable="false" Width="150px">
                    <Template Context="item">
                        <RadzenStack Gap="0.5rem">
                            @foreach (var craftItem in item.Craft.Items)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@($"{craftItem.Code}: {craftItem.Quantity}")" />
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CraftItem" Property="Craft.Quantity" Title="Craft Quantity" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Tradeable" Title="Tradeable" Width="100px">
                    <Template Context="item">
                        <RadzenIcon Icon="@(item.Tradeable ? "check_circle" : "cancel")" 
                                   IconColor="@(item.Tradeable ? "var(--rz-success)" : "var(--rz-danger)")" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</RadzenCard>

@code {
    private bool isLoading = true;
    private bool isCoordinatesTableVisible = false;
    private string contentType = string.Empty;
    private string craftMaterial = string.Empty;
    private List<Coordinate> coordinates = new List<Coordinate>();
    private List<CraftItem> craftItems = new List<CraftItem>();
    
    protected override async Task OnInitializedAsync()
    {
        CharacterService.OnCharactersUpdated += StateHasChanged;
        CharacterService.OnCooldownUpdated += StateHasChanged;
        
        await RefreshCharacters();
    }
    
    private async Task RefreshCharacters()
    {
        isLoading = true;
        await CharacterService.InitializeAsync();
        isLoading = false;
    }
    
    private void ToggleCoordinatesTable()
    {
        isCoordinatesTableVisible = !isCoordinatesTableVisible;
    }
    
    private async Task HandleCharacterExpand(string characterName)
    {
        // This method is called when a character is expanded/collapsed
        // The actual expansion/collapse is handled in the CharacterSummary component
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task FetchMapData()
    {
        try
        {
            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", 
                "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImdyYWhhbXJtNDVAZ21haWwuY29tIiwicGFzc3dvcmRfY2hhbmdlZCI6IiJ9.XjKyYTICSWCNv4irW5R52Zdkxc4wrQPhLheDtvlnnGQ");
            var url = "https://api.artifactsmmo.com/maps";
            if (!string.IsNullOrEmpty(contentType))
            {
                url += $"?content_type={contentType}";
            }
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var mapData = JsonDocument.Parse(jsonResponse);
                var coordinatesList = mapData.RootElement.GetProperty("data").EnumerateArray().Select(item => new Coordinate
                {
                    Name = item.GetProperty("name").GetString() ?? string.Empty,
                    X = item.GetProperty("x").GetInt32(),
                    Y = item.GetProperty("y").GetInt32(),
                    Content = new ResourceContent
                    {
                        Code = item.TryGetProperty("content", out JsonElement contentElement) && contentElement.ValueKind != JsonValueKind.Null && contentElement.TryGetProperty("code", out JsonElement codeElement) ? codeElement.GetString() ?? string.Empty : string.Empty,
                        Type = contentElement.ValueKind != JsonValueKind.Null && contentElement.TryGetProperty("type", out JsonElement typeElement) ? typeElement.GetString() ?? string.Empty : string.Empty
                    }
                }).ToList();
                
                coordinates = coordinatesList;
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Fetch map data action", response.StatusCode.ToString());
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fetch map data action", ex.Message);
        }
    }
    
    private async Task FetchCraftData()
    {
        try
        {
            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", 
                "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImdyYWhhbXJtNDVAZ21haWwuY29tIiwicGFzc3dvcmRfY2hhbmdlZCI6IiJ9.XjKyYTICSWCNv4irW5R52Zdkxc4wrQPhLheDtvlnnGQ");
            var url = $"https://api.artifactsmmo.com/items?craft_material={craftMaterial}";
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var craftData = JsonDocument.Parse(jsonResponse);
                var craftItemsList = craftData.RootElement.GetProperty("data").EnumerateArray().Select(item => new CraftItem
                {
                    Name = item.GetProperty("name").GetString() ?? string.Empty,
                    Code = item.GetProperty("code").GetString() ?? string.Empty,
                    Level = item.GetProperty("level").GetInt32(),
                    Type = item.GetProperty("type").GetString() ?? string.Empty,
                    Subtype = item.GetProperty("subtype").GetString() ?? string.Empty,
                    Description = item.GetProperty("description").GetString() ?? string.Empty,
                    Effects = item.GetProperty("effects").EnumerateArray().Select(effect => new Effect
                    {
                        Code = effect.GetProperty("code").GetString() ?? string.Empty,
                        Value = effect.GetProperty("value").GetInt32()
                    }).ToList(),
                    Craft = new Crafts
                    {
                        Skill = item.GetProperty("craft").GetProperty("skill").GetString() ?? string.Empty,
                        Level = item.GetProperty("craft").GetProperty("level").GetInt32(),
                        Items = item.GetProperty("craft").GetProperty("items").EnumerateArray().Select(craftItem => new CraftItemDetail
                        {
                            Code = craftItem.GetProperty("code").GetString() ?? string.Empty,
                            Quantity = craftItem.GetProperty("quantity").GetInt32()
                        }).ToList(),
                        Quantity = item.GetProperty("craft").GetProperty("quantity").GetInt32()
                    },
                    Tradeable = item.GetProperty("tradeable").GetBoolean()
                }).ToList();
                
                craftItems = craftItemsList;
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Fetch craft data action", response.StatusCode.ToString());
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fetch craft data action", ex.Message);
        }
    }
    
    public void Dispose()
    {
        CharacterService.OnCharactersUpdated -= StateHasChanged;
        CharacterService.OnCooldownUpdated -= StateHasChanged;
    }
    
    private class Coordinate
    {
        public required string Name { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public ResourceContent? Content { get; set; }
    }

    private class ResourceContent
    {
        public required string Type { get; set; }
        public required string Code { get; set; }
    }

    private class CraftItem
    {
        public required string Name { get; set; }
        public required string Code { get; set; }
        public int Level { get; set; }
        public required string Type { get; set; }
        public required string Subtype { get; set; }
        public required string Description { get; set; }
        public required List<Effect> Effects { get; set; } = new();
        public required Crafts Craft { get; set; }
        public bool Tradeable { get; set; }
    }

    private class Effect
    {
        public required string Code { get; set; }
        public int Value { get; set; }
    }

    private class Crafts
    {
        public required string Skill { get; set; }
        public int Level { get; set; }
        public required List<CraftItemDetail> Items { get; set; } = new();
        public int Quantity { get; set; }
    }

    private class CraftItemDetail
    {
        public required string Code { get; set; }
        public int Quantity { get; set; }
    }
}
