@page "/Move"
@using System.Text
@rendermode InteractiveServer
@using System.Diagnostics
@using Artifacts.Components
@using RestSharp
@using RestSharp.Authenticators
@using System.Text.Json
@using System.Timers
@using Radzen
@using Radzen.Blazor

@inject IHttpContextAccessor HttpContextAccessor
@inject NotificationService NotificationService

<PageTitle>Let's move together</PageTitle>

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenStack Gap="1rem">
        <RadzenText TextStyle="TextStyle.H3" class="rz-mb-0">Time to move</RadzenText>
        
        <RadzenProgressBar Value="@progressWidth" ShowValue="true" Style="height: 20px;" class="rz-mb-3" />
        
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.Start" Class="rz-mb-3">
            <RadzenButton ButtonStyle="@(IsActionButtonsDisabled ? ButtonStyle.Light : ButtonStyle.Primary)" 
                        Text="Move" 
                        Icon="directions_walk"
                        Click="@MoveAction" 
                        Disabled="@IsActionButtonsDisabled" />
            <RadzenButton ButtonStyle="@(autoGather ? ButtonStyle.Danger : ButtonStyle.Success)" 
                        Text="Gather" 
                        Icon="@(autoGather ? "stop" : "play_arrow")"
                        Click="@Gather" 
                        Disabled="@IsActionButtonsDisabled" />
            <RadzenButton ButtonStyle="ButtonStyle.Info" 
                        Text="Fetch Map Data" 
                        Icon="map"
                        Click="@FetchMapData" />
        </RadzenStack>

        <RadzenStack Gap="0.5rem" class="rz-p-2 rz-border-radius-1" Style="background-color: var(--rz-base-100);">
            <RadzenText TextStyle="TextStyle.Subtitle1">Current Position</RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="2rem">
                <RadzenText TextStyle="TextStyle.Body1">X: @currentXCoordinate</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">Y: @currentYCoordinate</RadzenText>
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenText TextStyle="TextStyle.H4" class="rz-mb-3">Character Information</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center" Class="rz-mb-3">
        <RadzenTextBox Placeholder="Character Name" @bind-Value="characterName" Style="width: 200px;" />
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Fetch Character Data" Icon="search" Click="@FetchCharacterData" />
    </RadzenStack>
</RadzenCard>
@if (characterData != null)
{
    <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Server" @bind-SelectedIndex=@selectedIndex>
        <Tabs>
            <RadzenTabsItem Text="Basic Info">
                <RadzenCard class="rz-card rz-variant-filled rz-border-radius-3">
                    <h3>@characterData.Name</h3>
                    <RadzenStack JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-2">
                        <RadzenText TextStyle="TextStyle.Body1">Account: @characterData.Account</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">Skin: @characterData.Skin</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">Level: @characterData.Level</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">XP: @characterData.Xp / @characterData.MaxXp</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">Gold: @characterData.Gold</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">Speed: @characterData.Speed</RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Skills">
                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Body1">Mining: @characterData.MiningLevel (XP: @characterData.MiningXp / @characterData.MiningMaxXp)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Woodcutting: @characterData.WoodcuttingLevel (XP: @characterData.WoodcuttingXp / @characterData.WoodcuttingMaxXp)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Fishing: @characterData.FishingLevel (XP: @characterData.FishingXp / @characterData.FishingMaxXp)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Weaponcrafting: @characterData.WeaponcraftingLevel (XP: @characterData.WeaponcraftingXp / @characterData.WeaponcraftingMaxXp)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Gearcrafting: @characterData.GearcraftingLevel (XP: @characterData.GearcraftingXp / @characterData.GearcraftingMaxXp)</RadzenText>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Body1">Jewelrycrafting: @characterData.JewelrycraftingLevel (XP: @characterData.JewelrycraftingXp / @characterData.JewelrycraftingMaxXp)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Cooking: @characterData.CookingLevel (XP: @characterData.CookingXp / @characterData.CookingMaxXp)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Alchemy: @characterData.AlchemyLevel (XP: @characterData.AlchemyXp / @characterData.AlchemyMaxXp)</RadzenText>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Stats">
                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Body1">HP: @characterData.Hp / @characterData.MaxHp</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Haste: @characterData.Haste</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Critical Strike: @characterData.CriticalStrike</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Wisdom: @characterData.Wisdom</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Prospecting: @characterData.Prospecting</RadzenText>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Body1">Attack Fire: @characterData.AttackFire</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Attack Earth: @characterData.AttackEarth</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Attack Water: @characterData.AttackWater</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Attack Air: @characterData.AttackAir</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Damage: @characterData.Dmg</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Damage Fire: @characterData.DmgFire</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Damage Earth: @characterData.DmgEarth</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Damage Water: @characterData.DmgWater</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Damage Air: @characterData.DmgAir</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Resistance Fire: @characterData.ResFire</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Resistance Earth: @characterData.ResEarth</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Resistance Water: @characterData.ResWater</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Resistance Air: @characterData.ResAir</RadzenText>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Position">
                <RadzenStack Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.Body1">X: @characterData.X</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1">Y: @characterData.Y</RadzenText>
                </RadzenStack>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Cooldown">
                <RadzenStack Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.Body1">Cooldown: @characterData.Cooldown</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1">Cooldown Expiration: @characterData.CooldownExpiration</RadzenText>
                </RadzenStack>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Equipment">
                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Body1">Leg Armor Slot: @characterData.LegArmorSlot</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Boots Slot: @characterData.BootsSlot</RadzenText>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Body1">Ring1 Slot: @characterData.Ring1Slot</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Ring2 Slot: @characterData.Ring2Slot</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Amulet Slot: @characterData.AmuletSlot</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Artifact1 Slot: @characterData.Artifact1Slot</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Artifact2 Slot: @characterData.Artifact2Slot</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Artifact3 Slot: @characterData.Artifact3Slot</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Utility1 Slot: @characterData.Utility1Slot (Quantity: @characterData.Utility1SlotQuantity)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Utility2 Slot: @characterData.Utility2Slot (Quantity: @characterData.Utility2SlotQuantity)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">Bag Slot: @characterData.BagSlot</RadzenText>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Inventory">
                <RadzenDataGrid Data="@characterData.Inventory">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(InventoryItem.Code)" Title="Name" />
                        <RadzenDataGridColumn Property="@nameof(InventoryItem.Quantity)" Title="Quantity" />
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenText TextStyle="TextStyle.H4" class="rz-mb-3">Craft Item</RadzenText>
    <RadzenStack Gap="1rem" Class="rz-mb-3">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center">
            <RadzenStack Gap="0.5rem" Style="width: 200px;">
                <RadzenText TextStyle="TextStyle.Caption">Item Code</RadzenText>
                <RadzenTextBox Placeholder="Enter item code" @bind-Value="craftItemCode" />
            </RadzenStack>
            <RadzenStack Gap="0.5rem" Style="width: 120px;">
                <RadzenText TextStyle="TextStyle.Caption">Quantity</RadzenText>
                <RadzenNumeric Placeholder="Qty" @bind-Value="craftItemQuantity" Min="1" />
            </RadzenStack>
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Craft Item" Icon="build" Click="@CraftItemAction" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenText TextStyle="TextStyle.H4" class="rz-mb-0">Coordinates</RadzenText>
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="@(isCoordinatesTableVisible ? "visibility_off" : "visibility")" Text="@(isCoordinatesTableVisible ? "Hide" : "Show")" Click="@ToggleCoordinatesTable" />
    </RadzenStack>
    
    @if (isCoordinatesTableVisible)
    {
        <RadzenStack Gap="1rem" Class="rz-mt-4">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.End">
                <RadzenStack Gap="0.5rem" Style="width: 200px;">
                    <RadzenText TextStyle="TextStyle.Caption">Content Type</RadzenText>
                    <RadzenTextBox Placeholder="Filter by type" @bind-Value="contentType" />
                </RadzenStack>
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Fetch Map Data" Icon="refresh" Click="@FetchMapData" />
            </RadzenStack>
            
            <RadzenDataGrid Data="@coordinates" TItem="Coordinate" AllowSorting="true" AllowFiltering="true" 
                           Style="height: 400px" AllowColumnResize="true" AllowPaging="true" PageSize="10"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           class="rz-shadow-1">
                <Columns>
                    <RadzenDataGridColumn TItem="Coordinate" Property="Name" Title="Name" Width="150px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="X" Title="X" Width="80px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="Y" Title="Y" Width="80px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="Content.Type" Title="Resource Type" 
                                        SortProperty="Content.Type" Width="150px" />
                    <RadzenDataGridColumn TItem="Coordinate" Property="Content.Code" Title="Resource Code" Width="150px" />
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    }
</RadzenCard>

<RadzenCard class="rz-my-4 rz-p-4 rz-shadow-3">
    <RadzenText TextStyle="TextStyle.H4" class="rz-mb-3">Craft Data</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.End" Class="rz-mb-4">
        <RadzenStack Gap="0.5rem" Style="width: 200px;">
            <RadzenText TextStyle="TextStyle.Caption">Craft Material</RadzenText>
            <RadzenTextBox Placeholder="Enter material" @bind-Value="craftMaterial" />
        </RadzenStack>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Fetch Craft Data" Icon="search" Click="@FetchCraftData" />
    </RadzenStack>
    
    @if (craftItems.Any())
    {
        <RadzenDataGrid Data="@craftItems" TItem="CraftItem" AllowSorting="true" AllowFiltering="true" 
                       Style="height: 500px" AllowColumnResize="true" AllowPaging="true" PageSize="10"
                       FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                       class="rz-shadow-1">
            <Columns>
                <RadzenDataGridColumn TItem="CraftItem" Property="Name" Title="Name" Width="150px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Code" Title="Code" Width="100px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Level" Title="Level" Width="80px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Type" Title="Type" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Subtype" Title="Subtype" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Description" Title="Description" Width="200px" />
                <RadzenDataGridColumn TItem="CraftItem" Title="Effects" Sortable="false" Width="150px">
                    <Template Context="item">
                        <RadzenStack Gap="0.5rem">
                            @foreach (var effect in item.Effects)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@($"{effect.Code}: {effect.Value}")" />
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CraftItem" Property="Craft.Skill" Title="Craft Skill" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Craft.Level" Title="Craft Level" Width="100px" />
                <RadzenDataGridColumn TItem="CraftItem" Title="Craft Items" Sortable="false" Width="150px">
                    <Template Context="item">
                        <RadzenStack Gap="0.5rem">
                            @foreach (var craftItem in item.Craft.Items)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@($"{craftItem.Code}: {craftItem.Quantity}")" />
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CraftItem" Property="Craft.Quantity" Title="Craft Quantity" Width="120px" />
                <RadzenDataGridColumn TItem="CraftItem" Property="Tradeable" Title="Tradeable" Width="100px">
                    <Template Context="item">
                        <RadzenIcon Icon="@(item.Tradeable ? "check_circle" : "cancel")" 
                                   IconColor="@(item.Tradeable ? "var(--rz-success)" : "var(--rz-danger)")" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</RadzenCard>

@code {
    private int yCoordinate { get; set; }
    private int xCoordinate { get; set; }
    private int currentXCoordinate { get; set; }
    private int currentYCoordinate { get; set; }
    private bool autoGather = false;
    private string token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImdyYWhhbXJtNDVAZ21haWwuY29tIiwicGFzc3dvcmRfY2hhbmdlZCI6IiJ9.XjKyYTICSWCNv4irW5R52Zdkxc4wrQPhLheDtvlnnGQ";
    private Timer? timer;
    private Timer? progressTimer;
    private int remainingSeconds;
    private int totalCooldownSeconds;
    private double progressWidth;
    private List<Item> inventory = new List<Item>();
    private List<Coordinate> coordinates = new List<Coordinate>();
    private bool sortAscending = true;
    private bool isCoordinatesTableVisible = false;
    private string contentType = string.Empty;
    private bool isInventorySectionVisible = false;
    private List<CraftItem> craftItems = new List<CraftItem>();
    private bool isStatsSectionVisible = false;
    private string characterName = "pancake";
    private CharacterData? characterData = null;
    private bool isCharInventorySectionVisible = false;
    private string craftItemCode = string.Empty;
    private int craftItemQuantity = 1;
    private string craftMaterial = string.Empty;
    private bool isSkillsSectionVisible = false;
    private int selectedIndex = 0;


    protected override void OnInitialized()
    {
        timer = new Timer(1000);
        timer.Elapsed += TimerElapsed;
        timer.Start();

        progressTimer = new Timer(2000);
        progressTimer.Elapsed += ProgressTimerElapsed;
        progressTimer.Start();
    }

    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        _ = UpdateCoordinates();
    }

    private void ProgressTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (remainingSeconds > 0)
        {
            remainingSeconds--;
            progressWidth = ((double)(totalCooldownSeconds - remainingSeconds) / totalCooldownSeconds) * 100;
            InvokeAsync(StateHasChanged);
        }
    }

    private void ToggleCoordinatesTable()
    {
        isCoordinatesTableVisible = !isCoordinatesTableVisible;
    }

    private async Task UpdateCoordinates()
    {
        try
        {
            var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await client.GetAsync("https://api.artifactsmmo.com/my/characters");
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var coordinatesData = JsonDocument.Parse(jsonResponse);
                var dataArray = coordinatesData.RootElement.GetProperty("data").EnumerateArray().ToList();
                foreach (var data in dataArray)
                {
                    if (data.GetProperty("name").GetString() == "pancake")
                    {
                        currentXCoordinate = data.GetProperty("x").GetInt32();
                        currentYCoordinate = data.GetProperty("y").GetInt32();
                        break;
                    }
                }
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating coordinates: {ex.Message}");
        }
    }

    private async Task MoveAction()
    {
        var client = new RestClient("https://api.artifactsmmo.com/my/pancake/action/move");
        var request = new RestRequest(Method.POST);
        request.AddHeader("Content-Type", "application/json");
        request.AddHeader("Accept", "application/json");
        request.AddHeader("Authorization", "Bearer " + token);
        var body = new { x = xCoordinate, y = yCoordinate };
        request.AddJsonBody(body);
        IRestResponse response = await client.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var jsonResponse = JsonDocument.Parse(response.Content);
            totalCooldownSeconds = jsonResponse.RootElement.GetProperty("data").GetProperty("cooldown").GetProperty("remaining_seconds").GetInt32();
            remainingSeconds = totalCooldownSeconds;
            Console.WriteLine("Move success");
            NotificationService.Notify(NotificationSeverity.Success, "Move action", "Move success");
        }
        else
        {
            Console.WriteLine("Move failed");
            NotificationService.Notify(NotificationSeverity.Error, "Move action", response.StatusCode.ToString());
        }
    }

    private async Task GetMap()
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await client.GetAsync("https://api.artifactsmmo.com/my/pancake/map");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Get map success");
            NotificationService.Notify(NotificationSeverity.Success, "Get map action", "Get map success");
        }
        else
        {
            Console.WriteLine("Get map failed");
            NotificationService.Notify(NotificationSeverity.Error, "Get map action", response.StatusCode.ToString());
        }
    }

    private async Task Gather()
    {
        autoGather = !autoGather;
        while (autoGather)
        {
            await GatherAction();
        }
    }

    private async Task GatherAction()
    {
        var client = new RestClient("https://api.artifactsmmo.com/my/pancake/action/gathering");
        var request = new RestRequest(Method.POST);
        request.AddHeader("Content-Type", "application/json");
        request.AddHeader("Accept", "application/json");
        request.AddHeader("Authorization", "Bearer " + token);
        IRestResponse response = client.Execute(request);
        if (response.IsSuccessful)
        {
            Console.WriteLine("Gather success");
            var jsonResponse = JsonDocument.Parse(response.Content);
            totalCooldownSeconds = jsonResponse.RootElement.GetProperty("data").GetProperty("cooldown").GetProperty("remaining_seconds").GetInt32();
            remainingSeconds = totalCooldownSeconds;

            NotificationService.Notify(NotificationSeverity.Success, "Gather action", remainingSeconds.ToString());
            await Task.Delay(remainingSeconds * 1000);
        }
        else
        {
            Console.WriteLine("Gather failed");
            if((int)response.StatusCode == 497)
            {
                autoGather = false;
            }
            NotificationService.Notify(NotificationSeverity.Error, "Gather action", response.StatusCode.ToString());
        }
    }

    private async Task FetchMapData()
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var url = "https://api.artifactsmmo.com/maps";
        if (!string.IsNullOrEmpty(contentType))
        {
            url += $"?content_type={contentType}";
        }
        var response = await client.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var mapData = JsonDocument.Parse(jsonResponse);
            var coordinatesList = mapData.RootElement.GetProperty("data").EnumerateArray().Select(item => new Coordinate
            {
                Name = item.GetProperty("name").GetString() ?? string.Empty,
                X = item.GetProperty("x").GetInt32(),
                Y = item.GetProperty("y").GetInt32(),
                Content = new ResourceContent
                {
                    Code = item.TryGetProperty("content", out JsonElement contentElement) && contentElement.ValueKind != JsonValueKind.Null && contentElement.TryGetProperty("code", out JsonElement codeElement) ? codeElement.GetString() ?? string.Empty : string.Empty,
                    Type = contentElement.ValueKind != JsonValueKind.Null && contentElement.TryGetProperty("type", out JsonElement typeElement) ? typeElement.GetString() ?? string.Empty : string.Empty
                }
            }).ToList();
            foreach(var coord in coordinatesList)
            {
                if(coord.Content != null)
                    Console.WriteLine($"Name: {coord.Name}, X: {coord.X}, Y: {coord.Y}, Type: {coord.Content.Type}, Code: {coord.Content.Code}");
            }
            if (coordinatesList != null)
            {
                coordinates = coordinatesList;
                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            Console.WriteLine("Fetch map data failed");
            NotificationService.Notify(NotificationSeverity.Error, "Fetch map data action", response.StatusCode.ToString());
        }
    }

    private async Task FetchCraftData()
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var url = $"https://api.artifactsmmo.com/items?craft_material={craftMaterial}";
        var response = await client.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var craftData = JsonDocument.Parse(jsonResponse);
            var craftItemsList = craftData.RootElement.GetProperty("data").EnumerateArray().Select(item => new CraftItem
            {
                Name = item.GetProperty("name").GetString() ?? string.Empty,
                Code = item.GetProperty("code").GetString() ?? string.Empty,
                Level = item.GetProperty("level").GetInt32(),
                Type = item.GetProperty("type").GetString() ?? string.Empty,
                Subtype = item.GetProperty("subtype").GetString() ?? string.Empty,
                Description = item.GetProperty("description").GetString() ?? string.Empty,
                Effects = item.GetProperty("effects").EnumerateArray().Select(effect => new Effect
                {
                    Code = effect.GetProperty("code").GetString() ?? string.Empty,
                    Value = effect.GetProperty("value").GetInt32()
                }).ToList(),
                Craft = new Crafts
                {
                    Skill = item.GetProperty("craft").GetProperty("skill").GetString() ?? string.Empty,
                    Level = item.GetProperty("craft").GetProperty("level").GetInt32(),
                    Items = item.GetProperty("craft").GetProperty("items").EnumerateArray().Select(craftItem => new CraftItemDetail
                    {
                        Code = craftItem.GetProperty("code").GetString() ?? string.Empty,
                        Quantity = craftItem.GetProperty("quantity").GetInt32()
                    }).ToList(),
                    Quantity = item.GetProperty("craft").GetProperty("quantity").GetInt32()
                },
                Tradeable = item.GetProperty("tradeable").GetBoolean()
            }).ToList();
            if (craftItemsList != null)
            {
                craftItems = craftItemsList;
                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            Console.WriteLine("Fetch craft data failed");
            NotificationService.Notify(NotificationSeverity.Error, "Fetch craft data action", response.StatusCode.ToString());
        }
    }

    private async Task CraftItemAction()
    {
        var client = new RestClient("https://api.artifactsmmo.com/my/pancake/action/crafting");
        var request = new RestRequest(Method.POST);
        request.AddHeader("Content-Type", "application/json");
        request.AddHeader("Accept", "application/json");
        request.AddHeader("Authorization", "Bearer " + token);
        var body = new { code = craftItemCode, quantity = craftItemQuantity };
        request.AddJsonBody(body);
        IRestResponse response = await client.ExecuteAsync(request);
        if (response.IsSuccessful)
        {
            var jsonResponse = JsonDocument.Parse(response.Content);
            totalCooldownSeconds = jsonResponse.RootElement.GetProperty("data").GetProperty("cooldown").GetProperty("remaining_seconds").GetInt32();
            remainingSeconds = totalCooldownSeconds;
            Console.WriteLine("Craft success");
            NotificationService.Notify(NotificationSeverity.Success, "Craft action", "Craft success");
        }
        else
        {
            Console.WriteLine("Craft failed");
            NotificationService.Notify(NotificationSeverity.Error, "Craft action", response.StatusCode.ToString());
        }
    }

    private void SortByType()
    {
        if (sortAscending)
        {
            coordinates = coordinates.OrderBy(c => c.Content?.Type).ToList();
        }
        else
        {
            coordinates = coordinates.OrderByDescending(c => c.Content?.Type).ToList();
        }
        sortAscending = !sortAscending;
    }

    private void ToggleInventorySection()
    {
        isInventorySectionVisible = !isInventorySectionVisible;
    }

    private void ToggleStatsSection()
    {
        isStatsSectionVisible = !isStatsSectionVisible;
        StateHasChanged();
    }

    private void ToggleSkillsSection()
    {
        isSkillsSectionVisible = !isSkillsSectionVisible;
    }
    private void ToggleCharInventorySection()
    {
        isCharInventorySectionVisible = !isCharInventorySectionVisible;
    }

    private async Task FetchCharacterData()
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var url = $"https://api.artifactsmmo.com/characters/{characterName}";
        var response = await client.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var characterJson = JsonDocument.Parse(jsonResponse);
            var character = characterJson.RootElement.GetProperty("data");
            characterData = new CharacterData
            {
                Name = character.GetProperty("name").GetString(),
                Account = character.GetProperty("account").GetString(),
                Skin = character.GetProperty("skin").GetString(),
                Level = character.GetProperty("level").GetInt32(),
                Xp = character.GetProperty("xp").GetInt32(),
                MaxXp = character.GetProperty("max_xp").GetInt32(),
                Gold = character.GetProperty("gold").GetInt32(),
                Speed = character.GetProperty("speed").GetInt32(),
                MiningLevel = character.GetProperty("mining_level").GetInt32(),
                MiningXp = character.GetProperty("mining_xp").GetInt32(),
                MiningMaxXp = character.GetProperty("mining_max_xp").GetInt32(),
                WoodcuttingLevel = character.GetProperty("woodcutting_level").GetInt32(),
                WoodcuttingXp = character.GetProperty("woodcutting_xp").GetInt32(),
                WoodcuttingMaxXp = character.GetProperty("woodcutting_max_xp").GetInt32(),
                FishingLevel = character.GetProperty("fishing_level").GetInt32(),
                FishingXp = character.GetProperty("fishing_xp").GetInt32(),
                FishingMaxXp = character.GetProperty("fishing_max_xp").GetInt32(),
                WeaponcraftingLevel = character.GetProperty("weaponcrafting_level").GetInt32(),
                WeaponcraftingXp = character.GetProperty("weaponcrafting_xp").GetInt32(),
                WeaponcraftingMaxXp = character.GetProperty("weaponcrafting_max_xp").GetInt32(),
                GearcraftingLevel = character.GetProperty("gearcrafting_level").GetInt32(),
                GearcraftingXp = character.GetProperty("gearcrafting_xp").GetInt32(),
                GearcraftingMaxXp = character.GetProperty("gearcrafting_max_xp").GetInt32(),
                JewelrycraftingLevel = character.GetProperty("jewelrycrafting_level").GetInt32(),
                JewelrycraftingXp = character.GetProperty("jewelrycrafting_xp").GetInt32(),
                JewelrycraftingMaxXp = character.GetProperty("jewelrycrafting_max_xp").GetInt32(),
                CookingLevel = character.GetProperty("cooking_level").GetInt32(),
                CookingXp = character.GetProperty("cooking_xp").GetInt32(),
                CookingMaxXp = character.GetProperty("cooking_max_xp").GetInt32(),
                AlchemyLevel = character.GetProperty("alchemy_level").GetInt32(),
                AlchemyXp = character.GetProperty("alchemy_xp").GetInt32(),
                AlchemyMaxXp = character.GetProperty("alchemy_max_xp").GetInt32(),
                Hp = character.GetProperty("hp").GetInt32(),
                MaxHp = character.GetProperty("max_hp").GetInt32(),
                Haste = character.GetProperty("haste").GetInt32(),
                CriticalStrike = character.GetProperty("critical_strike").GetInt32(),
                Wisdom = character.GetProperty("wisdom").GetInt32(),
                Prospecting = character.GetProperty("prospecting").GetInt32(),
                AttackFire = character.GetProperty("attack_fire").GetInt32(),
                AttackEarth = character.GetProperty("attack_earth").GetInt32(),
                AttackWater = character.GetProperty("attack_water").GetInt32(),
                AttackAir = character.GetProperty("attack_air").GetInt32(),
                Dmg = character.GetProperty("dmg").GetInt32(),
                DmgFire = character.GetProperty("dmg_fire").GetInt32(),
                DmgEarth = character.GetProperty("dmg_earth").GetInt32(),
                DmgWater = character.GetProperty("dmg_water").GetInt32(),
                DmgAir = character.GetProperty("dmg_air").GetInt32(),
                ResFire = character.GetProperty("res_fire").GetInt32(),
                ResEarth = character.GetProperty("res_earth").GetInt32(),
                ResWater = character.GetProperty("res_water").GetInt32(),
                ResAir = character.GetProperty("res_air").GetInt32(),
                X = character.GetProperty("x").GetInt32(),
                Y = character.GetProperty("y").GetInt32(),
                Cooldown = character.GetProperty("cooldown").GetInt32(),
                CooldownExpiration = character.GetProperty("cooldown_expiration").GetDateTime(),
                WeaponSlot = character.GetProperty("weapon_slot").GetString(),
                RuneSlot = character.GetProperty("rune_slot").GetString(),
                ShieldSlot = character.GetProperty("shield_slot").GetString(),
                HelmetSlot = character.GetProperty("helmet_slot").GetString(),
                BodyArmorSlot = character.GetProperty("body_armor_slot").GetString(),
                LegArmorSlot = character.GetProperty("leg_armor_slot").GetString(),
                BootsSlot = character.GetProperty("boots_slot").GetString(),
                Ring1Slot = character.GetProperty("ring1_slot").GetString(),
                Ring2Slot = character.GetProperty("ring2_slot").GetString(),
                AmuletSlot = character.GetProperty("amulet_slot").GetString(),
                Artifact1Slot = character.GetProperty("artifact1_slot").GetString(),
                Artifact2Slot = character.GetProperty("artifact2_slot").GetString(),
                Artifact3Slot = character.GetProperty("artifact3_slot").GetString(),
                Utility1Slot = character.GetProperty("utility1_slot").GetString(),
                Utility1SlotQuantity = character.GetProperty("utility1_slot_quantity").GetInt32(),
                Utility2Slot = character.GetProperty("utility2_slot").GetString(),
                Utility2SlotQuantity = character.GetProperty("utility2_slot_quantity").GetInt32(),
                BagSlot = character.GetProperty("bag_slot").GetString(),
                Task = character.GetProperty("task").GetString(),
                TaskType = character.GetProperty("task_type").GetString(),
                TaskProgress = character.GetProperty("task_progress").GetInt32(),
                TaskTotal = character.GetProperty("task_total").GetInt32(),
                InventoryMaxItems = character.GetProperty("inventory_max_items").GetInt32(),
                Inventory = character.GetProperty("inventory").EnumerateArray().Select(item => new InventoryItem
                {
                    Slot = item.GetProperty("slot").GetInt32(),
                    Code = item.GetProperty("code").GetString(),
                    Quantity = item.GetProperty("quantity").GetInt32()
                }).Where(x => x.Quantity > 0).ToList()
            };
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine("Fetch character data failed");
            NotificationService.Notify(NotificationSeverity.Error, "Fetch character data action", response.StatusCode.ToString());
        }
    }

    private string GetNonce()
    {
        return HttpContextAccessor.HttpContext?.Items["CSPNonce"] as string ?? string.Empty;
    }

    private bool IsActionButtonsDisabled => remainingSeconds > 0;

    private class Item
    {
        public string? Name { get; set; }
        public int Quantity { get; set; }
    }

    private class Coordinate
    {
        public required string Name { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public ResourceContent? Content { get; set; }
    }

    private class ResourceContent
    {
        public required string Type { get; set; }
        public required string Code { get; set; }
    }

    private class CraftItem
    {
        public required string Name { get; set; }
        public required string Code { get; set; }
        public int Level { get; set; }
        public required string Type { get; set; }
        public required string Subtype { get; set; }
        public required string Description { get; set; }
        public required List<Effect> Effects { get; set; } = new();
        public required Crafts Craft { get; set; }
        public bool Tradeable { get; set; }
    }

    private class Effect
    {
        public required string Code { get; set; }
        public int Value { get; set; }
    }

    private class Crafts
    {
        public required string Skill { get; set; }
        public int Level { get; set; }
        public required List<CraftItemDetail> Items { get; set; } = new();
        public int Quantity { get; set; }
    }

    private class CraftItemDetail
    {
        public required string Code { get; set; }
        public int Quantity { get; set; }
    }

    private class CharacterData
    {
        public required string Name { get; set; }
        public required string Account { get; set; }
        public required string Skin { get; set; }
        public int Level { get; set; }
        public int Xp { get; set; }
        public int MaxXp { get; set; }
        public int Gold { get; set; }
        public int Speed { get; set; }
        public int MiningLevel { get; set; }
        public int MiningXp { get; set; }
        public int MiningMaxXp { get; set; }
        public int WoodcuttingLevel { get; set; }
        public int WoodcuttingXp { get; set; }
        public int WoodcuttingMaxXp { get; set; }
        public int FishingLevel { get; set; }
        public int FishingXp { get; set; }
        public int FishingMaxXp { get; set; }
        public int WeaponcraftingLevel { get; set; }
        public int WeaponcraftingXp { get; set; }
        public int WeaponcraftingMaxXp { get; set; }
        public int GearcraftingLevel { get; set; }
        public int GearcraftingXp { get; set; }
        public int GearcraftingMaxXp { get; set; }
        public int JewelrycraftingLevel { get; set; }
        public int JewelrycraftingXp { get; set; }
        public int JewelrycraftingMaxXp { get; set; }
        public int CookingLevel { get; set; }
        public int CookingXp { get; set; }
        public int CookingMaxXp { get; set; }
        public int AlchemyLevel { get; set; }
        public int AlchemyXp { get; set; }
        public int AlchemyMaxXp { get; set; }
        public int Hp { get; set; }
        public int MaxHp { get; set; }
        public int Haste { get; set; }
        public int CriticalStrike { get; set; }
        public int Wisdom { get; set; }
        public int Prospecting { get; set; }
        public int AttackFire { get; set; }
        public int AttackEarth { get; set; }
        public int AttackWater { get; set; }
        public int AttackAir { get; set; }
        public int Dmg { get; set; }
        public int DmgFire { get; set; }
        public int DmgEarth { get; set; }
        public int DmgWater { get; set; }
        public int DmgAir { get; set; }
        public int ResFire { get; set; }
        public int ResEarth { get; set; }
        public int ResWater { get; set; }
        public int ResAir { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public int Cooldown { get; set; }
        public DateTime CooldownExpiration { get; set; }
        public required string WeaponSlot { get; set; }
        public required string RuneSlot { get; set; }
        public required string ShieldSlot { get; set; }
        public required string HelmetSlot { get; set; }
        public required string BodyArmorSlot { get; set; }
        public required string LegArmorSlot { get; set; }
        public required string BootsSlot { get; set; }
        public required string Ring1Slot { get; set; }
        public required string Ring2Slot { get; set; }
        public required string AmuletSlot { get; set; }
        public required string Artifact1Slot { get; set; }
        public required string Artifact2Slot { get; set; }
        public required string Artifact3Slot { get; set; }
        public required string Utility1Slot { get; set; }
        public int Utility1SlotQuantity { get; set; }
        public required string Utility2Slot { get; set; }
        public int Utility2SlotQuantity { get; set; }
        public required string BagSlot { get; set; }
        public required string Task { get; set; }
        public required string TaskType { get; set; }
        public int TaskProgress { get; set; }
        public int TaskTotal { get; set; }
        public int InventoryMaxItems { get; set; }
        public required List<InventoryItem> Inventory { get; set; } = new();
    }

    private class InventoryItem
    {
        public int Slot { get; set; }
        public required string Code { get; set; }
        public int Quantity { get; set; }
    }
}
